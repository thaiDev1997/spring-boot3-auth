plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	// Spotless
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.example.auth'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

ext {
	mapstructVersion = "1.5.5.Final"
	lombokMapstructBindingVersion = "0.2.0"
	springBootVersion = "3.2.5"
	spotlessLibVersion = "2.43.0"
	spotlessVersion = "6.25.0"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}";
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.postgresql:postgresql'
	/* Lombok -- start */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	/* Lombok -- end */
	/* MapStruct -- start */
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	/* MapStruct -- end */
	// spotless start
	implementation("com.diffplug.spotless:spotless-lib:${spotlessLibVersion}")
	implementation("com.diffplug.spotless:spotless-plugin-gradle:${spotlessVersion}")
	// spotless end

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.security:spring-security-test'
}

/* JaCoCO Configuration */
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
	jacoco {
		excludes += ["com/example/auth/dto/**"]
	}
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/example/auth/dto/**',
					'com/example/auth/mapper/**',
					'com/example/auth/entity/**',
					'com/example/auth/configuration/**',
					'com/example/auth/enums/**'
			])
		}))
	}
}

jacoco {
	toolVersion = "0.8.11"
	// reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1
			}
		}
	}
}

/* Spotless Configuration => .\gradlew clean build spotlessApply */
spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		toggleOffOn()
		googleJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

tasks.named('test') {
	useJUnitPlatform()
}